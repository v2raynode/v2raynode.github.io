<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://v2raynode.github.io/news/article-24599.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Token验证JWT方法</title>
    <link rel="icon" href="/assets/website/img/v2raynode/favicon.ico" type="image/x-icon"/>
        <meta name="description" content="使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：   客户端使用用户名跟密码请求登录 服务端收到请求，去验证用户名与密码 验证成功后，服务端会签发一个 To" />
        <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/v2raynode/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KDKFWTWW0S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KDKFWTWW0S');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                                <a class="navbar-brand d-flex align-items-center" href="/">
                        V2ray Node</a>
                                
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>

                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">Token验证JWT方法</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/news/">新闻资讯</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h5><a id="_Token__0" rel="nofollow"></a>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</h5> <blockquote> <ol> <li>客户端使用用户名跟密码请求登录</li> <li>服务端收到请求，去验证用户名与密码</li> <li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</li> <li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li> <li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li> <li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li> </ol> </blockquote> <h3><a id="JWT_9" rel="nofollow"></a>JWT验证</h3> <blockquote> <p>JWT，读作：<em>jot</em> ，表示：JSON Web Tokens</p> </blockquote> <p>JWT 标准的 Token 有三个部分：</p> <ul> <li>header（头部）</li> <li>payload（数据）</li> <li>signature（签名）</li> </ul> <p>中间用点分隔开，并且都会使用 Base64 编码，所以真正的 Token 看起来像这样：</p> <pre><code class="prism language-json">eyJhbGciOiJIUzI1NiJ9<span class="token punctuation">.</span>eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ<span class="token punctuation">.</span>SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc</code></pre> <h3><a id="Header_25" rel="nofollow"></a>Header</h3> <p>每个 JWT token 里面都有一个 header，也就是头部数据。里面包含了使用的算法，这个 JWT 是不是带签名的或者加密的。主要就是说明一下怎么处理这个 JWT token 。</p> <p>唯一在头部里面要包含的是<em>alg</em> 这个属性，如果是加密的 JWT，这个属性的值就是使用的签名或者解密用的算法。如果是未加密的 JWT，这个属性的值要设置成<em>none</em>。</p> <p>eg:</p> <pre><code class="prism language-json"><span class="token punctuation">{<!-- --></span><span class="token string">"alg"</span><span class="token punctuation">:</span><span class="token string">"HS256"</span><span class="token punctuation">}</span></code></pre> <p>意思是这个 JWT 用的算法是 HS256,在base64url编码之后变成</p> <pre><code class="prism language-json">eyJhbGciOiJIUzI1NiJ9</code></pre> <h3><a id="Payload_45" rel="nofollow"></a>Payload</h3> <p>Payload 里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容。</p> <ul> <li>iss：Issuer，发行者</li> <li>sub：Subject，主题</li> <li>aud：Audience，观众</li> <li>exp：Expiration time，过期时间</li> <li>nbf：Not before</li> <li>iat：Issued at，发行时间</li> <li>jti：JWT ID</li> </ul> <p>两个自定义的字段，一个是<em>name</em> ，还有一个是<em>admin</em> 。</p> <pre><code class="prism language-json"><span class="token punctuation">{<!-- --></span><span class="token string">"iss"</span><span class="token punctuation">:</span><span class="token string">"ninghao.net"</span><span class="token punctuation">,</span><span class="token string">"exp"</span><span class="token punctuation">:</span><span class="token string">"1438955445"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"wanghao"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span></code></pre> <p>使用 base64url 编码以后就变成了这个样子：</p> <pre><code class="prism language-json">eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ</code></pre> <h3><a id="Signature_74" rel="nofollow"></a>Signature</h3> <p>JWT 的最后一部分是 Signature ，这部分内容有三个部分，先是用 Base64 编码的<code>header.payload</code>，再用加密算法加密一下，加密的时候要放进去一个 Secret ，这个相当于是一个密码，这个密码秘密地存储在服务端。</p> <p>组成结构是这样子：</p> <ul> <li>header</li> <li>payload</li> <li>secret</li> </ul> <pre><code class="prism language-json"><span class="token keyword">const</span> encodedString<span class="token operator">=</span><span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span><span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">HMACSHA256</span><span class="token punctuation">(</span>encodedString<span class="token punctuation">,</span><span class="token string">'secret'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>处理完成以后看起来像这样：</p> <pre><code class="prism language-json">SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc</code></pre> <p>最后这个在服务端生成并且要发送给客户端的 Token 看起来像这样：(由以上三部分组成)</p> <pre><code class="prism language-json">eyJhbGciOiJIUzI1NiJ9<span class="token punctuation">.</span>eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ<span class="token punctuation">.</span>SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc</code></pre> <p>客户端收到这个 Token 以后把它存储下来，下回向服务端发送请求的时候就带着这个 Token 。服务端收到这个 Token ，然后进行验证，通过以后就会返回给客户端想要的资源。</p> <h3><a id="_103" rel="nofollow"></a>准备项目</h3> <p>准备一个简单的 Node.js 项目：</p> <pre><code class="prism language-js"><span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj<span class="token operator">&gt;</span>cd desktop<span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj\Desktop<span class="token operator">&gt;</span>mkdir jwt<span class="token operator">-</span>demo<span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj\Desktop<span class="token operator">&gt;</span>cd jwt<span class="token operator">-</span>demo<span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj\Desktop\jwt<span class="token operator">-</span>demo<span class="token operator">&gt;</span>npm init<span class="token operator">-</span>y</code></pre> <p>安装签发与验证 JWT 的功能包，我用的叫<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/auth0/node-jsonwebtoken"  rel="nofollow"><em>jsonwebtoken</em></a>，在项目里安装一下这个包：</p> <pre><code class="prism language-js"><span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj\Desktop\jwt<span class="token operator">-</span>demo<span class="token operator">&gt;</span>npm install jsonwebtoken</code></pre> <h3><a id="_JWT_123" rel="nofollow"></a>签发 JWT</h3> <p>在项目里随便添加一个 .js 文件，比如<em>index.js</em>，在文件里添加下面这些代码：</p> <pre><code class="prism language-js"><span class="token keyword">const</span> jwt<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token comment">// Token 数据</span><span class="token keyword">const</span> payload<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>   name<span class="token punctuation">:</span><span class="token string">'wanghao'</span><span class="token punctuation">,</span>   admin<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment">// 密钥</span><span class="token keyword">const</span> secret<span class="token operator">=</span><span class="token string">'ILOVENINGHAO'</span><span class="token comment">// 签发 Token</span><span class="token keyword">const</span> token<span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> secret<span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span> expiresIn<span class="token punctuation">:</span><span class="token string">'1day'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 输出签发的 Token</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></code></pre> <p>非常简单，就是用了刚刚为项目安装的<code>jsonwebtoken</code> 里面提供的<code>jwt.sign</code> 功能，去签发一个 token。这个<code>sign</code>方法需要三个参数：</p> <ol> <li><em>playload</em>：签发的 token 里面要包含的一些数据。</li> <li><em>secret</em>：签发 token 用的密钥，在验证 token 的时候同样需要用到这个密钥。</li> <li><em>options</em>：一些其它的选项。</li> </ol> <p>在命令行下面，用<em>node</em> 命令，执行一下项目里的<em>index.js</em> 这个文件（<em>node index.js</em>），会输出应用签发的<em>token</em>：</p> <pre><code class="prism language-js"><span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj\Desktop\jwt<span class="token operator">-</span>demo<span class="token operator">&gt;</span>node index<span class="token punctuation">.</span>js</code></pre> <pre><code class="prism language-json">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9<span class="token punctuation">.</span>eyJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlLCJpYXQiOjE1MjkwMzM5MDYsImV4cCI6MTUyOTEyMDMwNn0<span class="token punctuation">.</span>DctA2QlUCrM6wLWkIO78wBVN0NLpjoIq4T5B_2WJ<span class="token operator">-</span><span class="token constant">PU</span></code></pre> <p>上面的 Token 内容并没有加密，所以如果用一些 JWT 解码功能，可以看到 Token 里面包含的内容，内容由三个部分组成，像这样：</p> <pre><code class="prism language-json"><span class="token comment">// header</span><span class="token punctuation">{<!-- --></span><span class="token string">"alg"</span><span class="token punctuation">:</span><span class="token string">"HS256"</span><span class="token punctuation">,</span><span class="token string">"typ"</span><span class="token punctuation">:</span><span class="token string">"JWT"</span><span class="token punctuation">}</span><span class="token comment">// payload</span><span class="token punctuation">{<!-- --></span><span class="token string">"admin"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"iat"</span><span class="token punctuation">:</span><span class="token number">1529033906</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"wanghao"</span><span class="token punctuation">,</span><span class="token string">"exp"</span><span class="token punctuation">:</span><span class="token number">1529120306</span><span class="token punctuation">}</span><span class="token comment">// signature</span> DctA2QlUCrM6wLWkIO78wBVN0NLpjoIq4T5B_2WJ<span class="token operator">-</span><span class="token constant">PU</span></code></pre> <h3><a id="_JWT_183" rel="nofollow"></a>验证 JWT</h3> <p>打开项目的 index.js 文件，里面添加几行代码，变成下面的样子：</p> <pre><code class="prism language-js"><span class="token keyword">const</span> jwt<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token comment">// Token 数据</span><span class="token keyword">const</span> payload<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>   name<span class="token punctuation">:</span><span class="token string">'wanghao'</span><span class="token punctuation">,</span>   admin<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment">// 密钥</span><span class="token keyword">const</span> secret<span class="token operator">=</span><span class="token string">'ILOVENINGHAO'</span><span class="token comment">// 签发 Token</span><span class="token keyword">const</span> token<span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> secret<span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span> expiresIn<span class="token punctuation">:</span><span class="token string">'1day'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 输出签发的 Token</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token comment">// 验证 Token</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secret<span class="token punctuation">,</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> decoded<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p><code>把要验证的 Token 数据，还有签发这个 Token 的时候用的那个密钥告诉 *verify* 这个方法，在一个回调里面有两个参数，*error* 表示错误，*decoded* 是解码之后的 Token 数据。</code></p> <p>执行：</p> <pre><code class="prism language-js"><span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj\Desktop\jwt<span class="token operator">-</span>demo<span class="token operator">&gt;</span>node index<span class="token punctuation">.</span>js</code></pre> <p>输出：</p> <pre><code class="prism language-json">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9<span class="token punctuation">.</span>eyJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlLCJpYXQiOjE1MjkwMzQ3MzMsImV4cCI6MTUyOTEyMTEzM30<span class="token punctuation">.</span>swXojmu7VimFu3BoIgAxxpmm2J05dvD0HT3yu10vuqU<span class="token punctuation">{<!-- --></span> name<span class="token punctuation">:</span><span class="token string">'wanghao'</span><span class="token punctuation">,</span> admin<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> iat<span class="token punctuation">:</span><span class="token number">1529035386</span><span class="token punctuation">,</span> exp<span class="token punctuation">:</span><span class="token number">1529121786</span><span class="token punctuation">}</span></code></pre> <p>若输出：</p> <pre><code class="prism language-js">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9<span class="token punctuation">.</span>eyJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlLCJpYXQiOjE1MjkwMzQ3MzMsImV4cCI6MTUyOTEyMTEzM30<span class="token punctuation">.</span>swXojmu7VimFu3BoIgAxxpmm2J05dvD0HT3yu10vuqU  invalid signature</code></pre> <p>则表示签名不对，即<em>verify</em> 这个方法的参数是错误的。</p> <h3><a id="_244" rel="nofollow"></a>使用方法</h3> <h4><a id="1_node_246" rel="nofollow"></a>1 新建一个node项目，并为其安装环境</h4> <pre><code class="prism language-js"><span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj<span class="token operator">&gt;</span>cd desktop<span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj\Desktop<span class="token operator">&gt;</span>mkdir jwt<span class="token operator">-</span>demo<span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj\Desktop<span class="token operator">&gt;</span>cd jwt<span class="token operator">-</span>demo<span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj\Desktop\jwt<span class="token operator">-</span>demo<span class="token operator">&gt;</span>npm init<span class="token operator">-</span>y</code></pre> <p>执行结果：</p> <pre><code class="prism language-js">Wrote to<span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj\Desktop\jwt<span class="token operator">-</span>demo\<span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"jwt-demo"</span><span class="token punctuation">,</span><span class="token string">"version"</span><span class="token punctuation">:</span><span class="token string">"1.0.0"</span><span class="token punctuation">,</span><span class="token string">"description"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"main"</span><span class="token punctuation">:</span><span class="token string">"index.js"</span><span class="token punctuation">,</span><span class="token string">"scripts"</span><span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token string">"test"</span><span class="token punctuation">:</span><span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"keywords"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"author"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"license"</span><span class="token punctuation">:</span><span class="token string">"ISC"</span><span class="token punctuation">}</span></code></pre> <h4><a id="2_jsonwebtoken_277" rel="nofollow"></a>2 为项目安装<code>jsonwebtoken</code>环境</h4> <pre><code class="prism language-js"><span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj\Desktop\jwt<span class="token operator">-</span>demo<span class="token operator">&gt;</span>npm install jsonwebtoken</code></pre> <p>结果：</p> <pre><code>npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN jwt-demo@1.0.0 No description npm WARN jwt-demo@1.0.0 No repository field.  + jsonwebtoken@8.5.1 added 15 packages from 10 contributors in 1.194s  1 package is looking for funding   run `npm fund` for details</code></pre> <h4><a id="3__js___297" rel="nofollow"></a>3 新建一个 js 文件 ，并在其中添加基础的框架代码</h4> <pre><code class="prism language-js"><span class="token keyword">const</span> jwt<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token comment">// Token 数据</span><span class="token keyword">const</span> payload<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>   name<span class="token punctuation">:</span><span class="token string">'wanghao'</span><span class="token punctuation">,</span>   admin<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment">// 密钥</span><span class="token keyword">const</span> secret<span class="token operator">=</span><span class="token string">'ILOVENINGHAO'</span><span class="token comment">// 签发 Token</span><span class="token keyword">const</span> token<span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> secret<span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span> expiresIn<span class="token punctuation">:</span><span class="token string">'1day'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 输出签发的 Token</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token comment">// 验证 Token</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secret<span class="token punctuation">,</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> decoded<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <blockquote> <p>注意两个函数：</p> <p><code>sign</code>：需要三个参数，分别是payload，secret ， 和<em>options</em> ，表示一些其他选项</p> <p><code>verify</code>：需要三个参数，分别是携带信息的token ，密钥 secret ， 和一个回调的方法，这个方法需要由两个参数，分别是 error ，返回错误信息，另一个是decoded ， 返回该token解码的结果</p> </blockquote> <h4><a id="4_Token_334" rel="nofollow"></a>4 在命令窗口下验证该Token</h4> <pre><code class="prism language-js"><span class="token constant">C</span><span class="token punctuation">:</span>\Users\bnkj\Desktop\jwt<span class="token operator">-</span>demo<span class="token operator">&gt;</span>node index<span class="token punctuation">.</span>js</code></pre> <p>结果：</p> <pre><code class="prism language-json">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9<span class="token punctuation">.</span>eyJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlLCJpYXQiOjE2MDg0Njk5OTQsImV4cCI6MTYwODU1NjM5NH0<span class="token punctuation">.</span><span class="token number">7</span>Mi8WrHAv0fWZnLV6DlkPqK_ExQ4f09Zrs8eiVzXRQs<span class="token punctuation">{<!-- --></span> name<span class="token punctuation">:</span><span class="token string">'wanghao'</span><span class="token punctuation">,</span> admin<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> iat<span class="token punctuation">:</span><span class="token number">1608469994</span><span class="token punctuation">,</span> exp<span class="token punctuation">:</span><span class="token number">1608556394</span><span class="token punctuation">}</span></code></pre> <h3><a id="_352" rel="nofollow"></a>在项目中的使用方法</h3> <blockquote> <p>空 ，后续更新</p> </blockquote> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-24477.htm">动物疫苗接种禁忌症和注意事项有哪些内容 动物疫苗接种禁忌症和注意事项有哪些内容呢</a></p>
                                        <p>下一个：<a href="/news/article-24600.htm">上海宠物狗免费领养地址（上海宠物领养中心免费领养狗狗）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-3-22-node-share-links.htm" title="3月22日|22.7M/S，最新高速免费节点，Shadowrocket/Clash/SSR/V2ray订阅链接">3月22日|22.7M/S，最新高速免费节点，Shadowrocket/Clash/SSR/V2ray订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-14-clash-node.htm" title="7月14日|22.5M/S，最新高速免费节点，Clash/Shadowrocket/V2ray/SSR订阅链接地址">7月14日|22.5M/S，最新高速免费节点，Clash/Shadowrocket/V2ray/SSR订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-5-20-clash-v2ray-ss-ssr.htm" title="5月20日|18.1M/S，最新高速免费节点，Shadowrocket/V2ray/SSR/Clash订阅链接地址">5月20日|18.1M/S，最新高速免费节点，Shadowrocket/V2ray/SSR/Clash订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-3-9-free-v2ray-subscribe.htm" title="3月9日22.1M/S|Clash/Shadowrocket/V2ray/SSR免费节点每天更新订阅链接">3月9日22.1M/S|Clash/Shadowrocket/V2ray/SSR免费节点每天更新订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-17-free-node-subscribe.htm" title="9月17日|20M/S，最新高速免费节点，Shadowrocket/SSR/Clash/V2ray订阅链接地址，科学上网">9月17日|20M/S，最新高速免费节点，Shadowrocket/SSR/Clash/V2ray订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-6-11-free-v2ray.htm" title="6月11日|20.5M/S，最新高速免费节点，Shadowrocket/V2ray/Clash/SSR订阅链接地址">6月11日|20.5M/S，最新高速免费节点，Shadowrocket/V2ray/Clash/SSR订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-15-clash-windows.htm" title="7月15日|20.7M/S，最新高速免费节点，Shadowrocket/V2ray/SSR/Clash订阅链接地址">7月15日|20.7M/S，最新高速免费节点，Shadowrocket/V2ray/SSR/Clash订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-3-free-subscribe-node.htm" title="8月3日|19.4M/S，最新高速免费节点，Clash/Shadowrocket/SSR/V2ray订阅链接地址，科学上网">8月3日|19.4M/S，最新高速免费节点，Clash/Shadowrocket/SSR/V2ray订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-20-clash-v2ray-ss-ssr.htm" title="9月20日|19.3M/S，最新高速免费节点，V2ray/SSR/Clash/Shadowrocket订阅链接地址，科学上网">9月20日|19.3M/S，最新高速免费节点，V2ray/SSR/Clash/Shadowrocket订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-25-free-ssr-subscribe.htm" title="9月25日|20M/S，最新高速免费节点，Shadowrocket/V2ray/SSR/Clash订阅链接地址，科学上网">9月25日|20M/S，最新高速免费节点，Shadowrocket/V2ray/SSR/Clash订阅链接地址，科学上网</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">39</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">29</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">29</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                    <p>V2rayNode节点分享站 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/v2raynode/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/website/js/frontend/v2raynode/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/website/js/frontend/v2raynode/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/v2raynode/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/website/js/frontend/v2raynode/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>