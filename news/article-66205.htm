<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://v2raynode.github.io/news/article-66205.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Zookeeper的Watch机制实现配置中心</title>
    <link rel="icon" href="/assets/website/img/v2raynode/favicon.ico" type="image/x-icon"/>
        <meta name="description" content="目录  一、简介   1.1 环境准备   二、代码实现   2.1 项目搭建 2.2 获得zk客户端 2.3 实现动态监控节点状态 2.4 测试   三、代码分析 四、源码     ZooKeepe" />
    
    <meta name="author" content="V2rayNode节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://v2raynode.github.io/news/article-66205.htm" />
    <meta property="og:site_name" content="V2rayNode节点分享站" />
    <meta property="og:title" content="Zookeeper的Watch机制实现配置中心" />
    <meta property="og:image" content="https://v2raynode.github.io/uploads/20240303/1a96a5d4718f040752f116dea580c5a1.webp" />
        <meta property="og:release_date" content="2025-03-03T08:13:22" />
    <meta property="og:updated_time" content="2025-03-03T08:13:22" />
        <meta property="og:description" content="目录  一、简介   1.1 环境准备   二、代码实现   2.1 项目搭建 2.2 获得zk客户端 2.3 实现动态监控节点状态 2.4 测试   三、代码分析 四、源码     ZooKeepe" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Zookeeper的Watch机制实现配置中心">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/v2raynode/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KDKFWTWW0S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KDKFWTWW0S');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand d-flex align-items-center" href="/">
                                    <span>V2ray Node</span>
                                </a>

                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">Zookeeper的Watch机制实现配置中心</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/news/">新闻资讯</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>目录</h3> <ul> <li><a href="#_1" rel="nofollow">一、简介</a></li> <li> <ul> <li><a href="#11__4" rel="nofollow">1.1 环境准备</a></li> </ul> </li> <li><a href="#_79" rel="nofollow">二、代码实现</a></li> <li> <ul> <li><a href="#21__80" rel="nofollow">2.1 项目搭建</a></li> <li><a href="#22_zk_104" rel="nofollow">2.2 获得zk客户端</a></li> <li><a href="#23__183" rel="nofollow">2.3 实现动态监控节点状态</a></li> <li><a href="#24__296" rel="nofollow">2.4 测试</a></li> </ul> </li> <li><a href="#_303" rel="nofollow">三、代码分析</a></li> <li><a href="#_316" rel="nofollow">四、源码</a></li> </ul> </div> </h1> <blockquote> <p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p> </blockquote> <h2><a id="11__4" rel="nofollow"></a>1.1 环境准备</h2> <p>服务器配置：</p> <table> <thead> <tr> <th>节点</th> <th>IP</th> </tr> </thead> <tbody> <tr> <td>node01</td> <td>192.168.153.128</td> </tr> <tr> <td>node02</td> <td>192.168.153.128</td> </tr> <tr> <td>node03</td> <td>192.168.153.128</td> </tr> </tbody> </table> <p>zookeeper集群使用了Docker进行搭建：</p> <pre><code class="prism language-powershell"><span class="token comment">#下载镜像</span> docker pull zookeeper:3<span class="token punctuation">.</span>4<span class="token punctuation">.</span>13</code></pre> <p>在<code>conf</code>目录下创建<code>zoo.cfg</code>文件：</p> <pre><code class="prism language-txt">clientPort=2181  dataDir=/data dataLogDir=/data/log tickTime=2000  initLimit=5  syncLimit=2  autopurge.snapRetainCount=3  autopurge.purgeInterval=0  maxClientCnxns=60  server.1=192.168.153.128:2888:3888  server.2=192.168.153.129:2888:3888  server.3=192.168.153.130:2888:3888</code></pre> <p>在<code>data</code>目录下创建<code>myid</code>文件：(注意写入的数字对应的是zoo.cfg配置中server.后的数字)</p> <pre><code class="prism language-powershell"><span class="token comment">#在node01节点</span><span class="token function">echo</span><span class="token string">"1"</span> &gt; myid<span class="token comment">#在node02节点</span><span class="token function">echo</span><span class="token string">"2"</span> &gt; myid<span class="token comment">#在node03节点</span><span class="token function">echo</span><span class="token string">"3"</span> &gt; myid</code></pre> <p>创建容器：</p> <pre><code class="prism language-powershell"><span class="token comment">#创建容器</span> docker run<span class="token operator">--</span>network host<span class="token operator">-</span>v<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>docker/zk/<span class="token keyword">data</span>:<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">-</span>v<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>docker/zk/conf:<span class="token operator">/</span>conf<span class="token operator">--</span>name zookeeper-2181<span class="token operator">-</span>d zookeeper:3<span class="token punctuation">.</span>4<span class="token punctuation">.</span>13</code></pre> <p>然后进入容器内部：</p> <pre><code class="prism language-powershell"><span class="token comment">#查看zk容器ID</span> docker<span class="token function">ps</span><span class="token punctuation">|</span>grep zookeeper<span class="token comment"># 进入zk容器内部</span> docker exec<span class="token operator">-</span>it 6d6834a69123<span class="token operator">/</span>bin/bash<span class="token comment"># 查看zk状态</span> zkServer<span class="token punctuation">.</span>sh status<span class="token comment"># 启动zk</span> zkServer<span class="token punctuation">.</span>sh<span class="token function">start</span><span class="token comment"># 启动zk 客户端</span> zkCli<span class="token punctuation">.</span>sh</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/be5fb5e49a3f3864194a8e16b7023ee9.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> <p>以下简单演示一下zk 客户端的命令使用：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/8bc1237548acaea1a5bc15e674f22241.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> <p><code>create</code>创建一个节点，<code>get</code> 获得数据，<code>set</code> 设置数据：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/0d25e807518e70a3862536eea32b129e.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> <p>创建一个临时节点，在客户端断开连接的时候，session会话消失，这个临时节点也会被自动删除。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/14eb30ee7874662157bd2a938c51568e.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/bc5fe1f70206abd0940eb161888ff894.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> </h1> <h2><a id="21__80" rel="nofollow"></a>2.1 项目搭建</h2> <p>创建Maven项目，导入pom依赖：</p> <pre><code class="prism language-xml"><span class="token comment">&lt;!-- zookeeper --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- lombok --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- junit --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre> <h2><a id="22_zk_104" rel="nofollow"></a>2.2 获得zk客户端</h2> <p>创建<code>ZkUtil</code>工具类，获得zk客户端连接：<br /> 注意：new 出的ZooKeeper不能立即返回，还需要等待和zk server端建立连接后才能返回，所以借助了<code>CountDownLatch</code>。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">ZkUtil</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">ZooKeeper</span> zooKeeper<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token class-name">String</span> host<span class="token operator">=</span><span class="token string">"192.168.153.128:2181,192.168.153.129:2181,192.168.153.130:2181"</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token keyword">int</span> timeout<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">DefaultWatch</span> defaultWatch<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">DefaultWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**      * 获得zkClient      * 注意：new 出的ZooKeeper不能立即返回，还需要等待和zk server端建立连接后才能返回      * 需要注册一个watch：此处自定义了DefaultWatch      * @return      */</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">ZooKeeper</span><span class="token function">getZkClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             defaultWatch<span class="token punctuation">.</span><span class="token function">setCountDownLatch</span><span class="token punctuation">(</span>countDownLatch<span class="token punctuation">)</span><span class="token punctuation">;</span>             zooKeeper<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> defaultWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>             countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞中，等待DefaultWatch连接成功</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getZkClient error:{}"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> zooKeeper<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 关闭zk客户端连接      */</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">closeZK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>zooKeeper<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>                 zooKeeper<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>创建自定义Watch实现类：</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: LiuShihao  * @Date: 2022/8/15 23:33  * @Desc: 构造默认Watch，在ZkUtil中使用  */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">DefaultWatch</span><span class="token keyword">implements</span><span class="token class-name">Watcher</span><span class="token punctuation">{<!-- --></span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setCountDownLatch</span><span class="token punctuation">(</span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>countDownLatch<span class="token operator">=</span> countDownLatch<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected</span><span class="token operator">==</span>event<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//如果收到了服务端的响应事件,连接成功</span>             countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Zookeeper Connected Successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2><a id="23__183" rel="nofollow"></a>2.3 实现动态监控节点状态</h2> <p>自定义<code>WatchCallBack</code>类实现<code>Watcher</code>、<code>AsyncCallback.StatCallback</code>、<code>AsyncCallback.DataCallback</code>，重写三个回调方法。</p> <ol> <li>实现<code>Watcher</code>接口，重写回调方法，当节点产生<code>Event</code>事件，就会触发<code>Watch</code>的回调方法。</li> <li>实现<code>StatCallback</code>接口，重写回调方法，当调用<code>zooKeeper.exists()</code>方法判断节点是否存在的时候，就会触发回调方法。</li> <li>实现<code>DataCallback</code>接口，重写回调方法，当调用<code>zooKeeper.getData()</code>方法获取节点数据的时候，就会触发回调方法。</li> </ol> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: LiuShihao  * @Date: 2022/8/15 23:50  * @Desc:  实现三个接口  * Watcher 注册节点监控回调  * StatCallback exists 节点是否存在异步回调  * DataCallback getData 获取数据异步回调  */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">WatchCallBack</span><span class="token keyword">implements</span><span class="token class-name">Watcher</span><span class="token punctuation">,</span><span class="token class-name">AsyncCallback<span class="token punctuation">.</span>StatCallback</span><span class="token punctuation">,</span><span class="token class-name">AsyncCallback<span class="token punctuation">.</span>DataCallback</span><span class="token punctuation">{<!-- --></span><span class="token comment">//注意，getData数据时需要使用zk对象，需要手动set</span><span class="token class-name">ZooKeeper</span> zooKeeper<span class="token punctuation">;</span><span class="token class-name">String</span> path<span class="token punctuation">;</span><span class="token class-name">MyConf</span> myConf<span class="token punctuation">;</span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token class-name">WatchCallBack</span><span class="token punctuation">(</span><span class="token class-name">ZooKeeper</span> zooKeeper<span class="token punctuation">,</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>zooKeeper<span class="token operator">=</span> zooKeeper<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token operator">=</span> path<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">aWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//判断节点是否存在，会出发exists异步回调方法（方法2）</span>         zooKeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待MyConf数据取完</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/**      * 1 getData 异步回调      */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">processResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> rc<span class="token punctuation">,</span><span class="token class-name">String</span> path<span class="token punctuation">,</span><span class="token class-name">Object</span> ctx<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span><span class="token class-name">Stat</span> stat<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//如果数据不为空，则设置myConf，countDown -1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getData 回调："</span><span class="token operator">+</span><span class="token keyword">new</span><span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             myConf<span class="token punctuation">.</span><span class="token function">setConf</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token comment">//数据为空，countDown继续阻塞，如果节点有数据写入，发生NodeDataChanged事件，触发watch回调方法（方法3）</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getData 回调 :没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/**      * 2 exists 判断节点是否存在 异步回调      */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">processResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> rc<span class="token punctuation">,</span><span class="token class-name">String</span> path<span class="token punctuation">,</span><span class="token class-name">Object</span> ctx<span class="token punctuation">,</span><span class="token class-name">Stat</span> stat<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======exists 回调======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>stat<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======"</span><span class="token operator">+</span>path<span class="token operator">+</span><span class="token string">" 节点存在======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发getData的异步回调方法（方法1）</span>             zooKeeper<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====== "</span><span class="token operator">+</span>path<span class="token operator">+</span><span class="token string">" 节点不存在======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/**      * 3 watch 观察节点 回调方法      */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//        System.out.println("WatchedEvent 回调："+event.getState());</span><span class="token keyword">switch</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">case</span><span class="token class-name">None</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token class-name">NodeCreated</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WatchedEvent 回调：节点被创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点刚被创建出来</span><span class="token comment">//整个流程：首先在TestConfig类中判断节点是否存在，此时节点还未创建，则被阻塞在aWait()方法，等到节点被创建出，发生watch回调，即此处，然后继续获得数据，出发getData回调方法，从而完成aWait方法（）</span>                 zooKeeper<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token class-name">NodeDeleted</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WatchedEvent 回调：节点被删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//容忍性问题</span><span class="token comment">//如果节点被删除，数据要怎么处理？</span><span class="token comment">//清空myConf</span>                 myConf<span class="token punctuation">.</span><span class="token function">setConf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//并且countDownLatch重新赋值</span>                 countDownLatch<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token class-name">NodeDataChanged</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WatchedEvent 回调：节点数据被更改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意：如果数据被变更，则需要重新获取数据</span>                 zooKeeper<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token class-name">NodeChildrenChanged</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2><a id="24__296" rel="nofollow"></a>2.4 测试</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/89a34769fa53df50d251116f2b1301dc.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/f45c914b22af4826c6b074cfaf1ceea3.jpg" alt="Zookeeper的Watch机制实现配置中心"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/d09a6416165ac3776af0c7b7f52165e5.jpg" alt="Zookeeper的Watch机制实现配置中心"></p> </h1> <p>流程分析：<br /><em>程序</em>：启动程序，此时节点还未创建出来，程序被阻塞，等待节点创建<br /><em>命令行</em>：使用zk客户端命令行创建节点<br /><em>程序</em>：节点被创建，程序获取数据，打印数据<br /><em>命令行</em>：使用zk客户端命令行修改节点数据<br /><em>程序</em>：节点数据被修改程序获得更新后数据<br /><em>命令行</em>：使用zk客户端命令行删除节点<br /><em>程序</em>：节点被删除，程序阻塞，等待节点创建获取数据</p> <p>利用<code>watch</code>机制，实现<strong>服务上下线</strong>、<strong>配置文件修改通知</strong>，从而实现<strong>配置中心</strong>、<strong>注册中心</strong>的功能，另外利用zookeeper的临时节点在session会话结束后自动删除，还可以实现<strong>分布式锁</strong>的功能。</p> </h1> <p>源码已上传Github：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/Liu-Shihao/zookeeper-api"  rel="nofollow">https://github.com/Liu-Shihao/zookeeper-api</a><br /> 了解更多内容，请关注微信公众号：<code>TalkJava</code></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-65566.htm">动物疫病预防控制中心忙不忙（动物疫病预防控制中心给宠物看病吗）</a></p>
                                        <p>下一个：<a href="/news/article-66206.htm">【宠物免费领养】-合肥58同城（合肥免费领养猫咪）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-49239.htm" title="猫三联是几针啊（猫三联一共几针,多少钱）">猫三联是几针啊（猫三联一共几针,多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-43287.htm" title="免费领养宠物交易平台官网下载的简单介绍">免费领养宠物交易平台官网下载的简单介绍</a></li>
                        <li class="py-2"><a href="/news/article-62534.htm" title="动物诊疗许可证申请条件（动物诊疗许可证需要什么材料）">动物诊疗许可证申请条件（动物诊疗许可证需要什么材料）</a></li>
                        <li class="py-2"><a href="/news/article-47246.htm" title="数据库事务四大特性以及四大隔离级别">数据库事务四大特性以及四大隔离级别</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-15-node-share.htm" title="2月15日|21.9M/S，最新高速免费节点，V2ray/SSR/Clash/Shadowrocket订阅链接地址，科学上网">2月15日|21.9M/S，最新高速免费节点，V2ray/SSR/Clash/Shadowrocket订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/news/article-59587.htm" title="塞尔达海拉鲁大陆（塞尔达海拉鲁大陆之外是什么）">塞尔达海拉鲁大陆（塞尔达海拉鲁大陆之外是什么）</a></li>
                        <li class="py-2"><a href="/news/article-63748.htm" title="宠物粮食加工设备有哪些品牌 宠物粮食加工设备有哪些品牌好">宠物粮食加工设备有哪些品牌 宠物粮食加工设备有哪些品牌好</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-28-clash-v2ray-ss-ssr.htm" title="1月28日|22.8M/S，最新高速免费节点，Clash/SSR/Shadowrocket/V2ray订阅链接地址，科学上网">1月28日|22.8M/S，最新高速免费节点，Clash/SSR/Shadowrocket/V2ray订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/news/article-65565.htm" title="农药批发价目表农药批发（最全的农药批发网）">农药批发价目表农药批发（最全的农药批发网）</a></li>
                        <li class="py-2"><a href="/news/article-52888.htm" title="宠物粮店怎么开 宠物粮店怎么开店">宠物粮店怎么开 宠物粮店怎么开店</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">15</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>V2rayNode节点分享站 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/v2raynode/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/website/js/frontend/v2raynode/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/website/js/frontend/v2raynode/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/v2raynode/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/website/js/frontend/v2raynode/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>