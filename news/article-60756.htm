<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://v2raynode.github.io/news/article-60756.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>领域驱动模型DDD使用Saga管理事务</title>
    <link rel="icon" href="/assets/website/img/v2raynode/favicon.ico" type="image/x-icon"/>
        <meta name="description" content="虽然一直说想写一篇关于Saga模式，在多次尝试后不得不承认这玩意儿的仿制代码真不是我一个菜鸟就能完成的，所以还是妥协般地引用现成的Eventuate Tram Saga框架（虽然我对它一直很反感）和S" />
    
    <meta name="author" content="V2rayNode节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://v2raynode.github.io/news/article-60756.htm" />
    <meta property="og:site_name" content="V2rayNode节点分享站" />
    <meta property="og:title" content="领域驱动模型DDD使用Saga管理事务" />
    <meta property="og:image" content="https://v2raynode.github.io/uploads/20240303/8b69b2225cc93f8e9830dbb0bee23a1f.webp" />
        <meta property="og:release_date" content="2025-02-22T07:09:51" />
    <meta property="og:updated_time" content="2025-02-22T07:09:51" />
        <meta property="og:description" content="虽然一直说想写一篇关于Saga模式，在多次尝试后不得不承认这玩意儿的仿制代码真不是我一个菜鸟就能完成的，所以还是妥协般地引用现成的Eventuate Tram Saga框架（虽然我对它一直很反感）和S" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="领域驱动模型DDD使用Saga管理事务">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/v2raynode/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KDKFWTWW0S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KDKFWTWW0S');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand d-flex align-items-center" href="/">
                                    <span>V2ray Node</span>
                                </a>

                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">领域驱动模型DDD使用Saga管理事务</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/news/">新闻资讯</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p>虽然一直说想写一篇关于Saga模式，在多次尝试后不得不承认这玩意儿的仿制代码真不是我一个菜鸟就能完成的，所以还是妥协般地引用现成的Eventuate Tram Saga框架（虽然我对它一直很反感）和Seata的Saga模式。有一说一，我极其不愿意采用这种封装好的框架和解决方案对知识进行讲解，因为庞大的架构和源码对读者来说跨度太大，可是如果想把它内部流程讲清又要花费很大的精力进行详解，而且太考验文章的叙述文字功底了。</p> <p>这有违我一直提倡的：“架构”是一种理论思想而非具体百搭的代码段。鉴于此，此章我会竭尽所能把基于框架的Saga模式讲解清晰，希望读者能够反复阅读，有不解的地方尽情在评论区询问。</p> </h1> <h2 id="分布式事务的挑战">分布式事务的挑战</h2> <p>在分布式系统中会把一个应用系统拆分为可独立部署的多个服务，因此需要服务与服务之间远程协作才能完成事务操作，这种分布式系统环境下的保证事务特性（ACID）的机制运转称之为分布式事务。</p> <p>多个服务、数据库、消息代理之间在很多时候是必须维持数据一致性。特别是涉及金融交易的模块，即使可能只是出现1的偏差，也会因为蝴蝶效应而导致巨大损失。最原始的分布式事务管理的实施标准是XA模式（<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/linchenguang/p/13887010.html"  target="_blank" rel="nofollow">Seata AT和XA模式</a>），其采用了两段式提交来保证事务中所有参与者都是健康且同时完成提交，或则在事务失败时同时进行回滚。</p> <p>但XA模式也衍生出相关的问题：1、许多新技术包括NoSQL、RabbitMq并不支持XA标准的分布式事务；2、其性能上因为采用阻塞性协议，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态，这就容易出现响应时间增长、死锁等问题；3、由于分布式事务采用的时同步进程间通信（发送请求就必须收到应答，否则不进行下次传输），这导致一旦分布式事务中的一个参与方出现问题就会让整个系统无法正常使用，降低了系统总体的可用性。</p> <p>Eric Brewer在著名的CAP理论中证明了系统只要在一致性、可用性、分区容错性中保证两个就行。</p> <p>分区容错性：在分布式系统中因为网络通讯故障而导致整个整体被分割成一个个分区，而这些分区仍可以继续对外供满足一致性和可用性的服务。（必要的）</p> <p>可用性：系统一直处于可用状态，能正常响应数据，但是不保证响应数据为最新数据。</p> <p>一致性：数据在多个副本之间能够保持一致的特性（Mysql主从表）。</p> <p>今天，大部分架构师会倾向保证系统可用性，而将数据强制一致性的要求降低至满足最终一致便可。Saga正是为了解决微服务架构下数据一致性的问题，构建在松耦合、异步服务之上的机制。</p> <h2 id="saga的机制">Saga的机制</h2> <p>当本地事务完成时服务就会发布消息（图中Create order完成时发布消息），然后触发Saga中的下一个步骤（触发库存服务中预减库存）。通过<code>消息发送</code>的方式可以确保所有参与服务之间的松耦合，也可以让整个业务流程实现异步通信，即使其中一些消息的接收方不可用，消息代理也会先进性缓存，直到消息被接受为止。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/67dd0bc8149ea7352289ef3832c81937.jpg" alt="领域驱动模型DDD使用Saga管理事务"></p> <h3 id="saga的补偿式事务回滚">Saga的补偿式事务回滚</h3> <p>用八个字即可概括：有则继续，无则补偿。例如：当我从<code>钱包</code>中拿出5块钱跟柜员说从<code>冰箱</code>里拿一根巧克力甜筒，如果柜员发现<code>冰箱</code>中有巧克力甜筒，就把甜筒拿出给我，把钱放入<code>收银柜</code>中。如果柜员发现<code>冰箱</code>没有巧克力甜筒，则把钱返回给我放回<code>钱包</code>。</p> <p>以上例子中从 ①我拿出钱支付-&gt;②柜员接过钱确认有存货-&gt;③给我甜筒-&gt;④将钱放入收银柜中-&gt;⑤我离开店铺 是一整个活动流程。其中每一小段都是一个事务（不可分割），当没有存货时就把钱返还给我确保<code>钱包</code>的钱没有少，这里的<code>还钱</code>便是<code>给钱</code>的补偿事务。</p> <p>其中①-③被称为<code>可补偿性事务</code>，因为它们后面跟着的步骤可能失败，例如对①来说失败情况就是没有存货，那么补偿事务就是<code>还钱</code>；对③来说失败情况可能是给了假钞，那么补偿事务就是<code>要回甜筒放回货柜里</code>。第④步被称为<code>关键性事务</code>，因为后面跟着的是不可能失败的步骤（如果第④步已经成功完成，其实已经说明整个流程是成功的，因为我肯定能离开店铺）。对于最后的步骤成为<code>可重复性事务</code>，因为它们一定会成功。</p> <h2 id="saga的协调模式">Saga的协调模式</h2> <p>·协同式：把Saga的决策和决定执行顺序的逻辑分布在Saga的每一个参与方上，让它们各自通过交换事件的方式进行沟通。（各管各的）</p> <p>·编排器：把Saga的决策和决定执行顺序的逻辑集中在一个Saga编排器类（理解成一个管理中心）上，Saga编排器发出<code>命令式</code>的消息给每一个参与方，指挥这些参与方完成具体操作。（中央调度）</p> <h3 id="协同式saga">协同式Saga</h3> <p>在下图中是简单的订单创建-&gt;支付成功-&gt;完成订单的流程，其中库存服务和支付服务通过订阅相关的消息通道接受事件消息，从而能够按顺序完成需要自己参与的事务工作。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9a7f9e25b6fa377b846b5b16ddff2633.jpg" alt="领域驱动模型DDD使用Saga管理事务"></p> <p>以上是支付成功情况下，支付服务就发布PaySucceed事件，之后库存服务和订单服务就陆续完成减库存和完成订单的操作。</p> <p>而出现支付失败情况下，支付服务就发布PayFail事件，库存服务会消费该事件并进行Inventory cancelReduction（减库存取消）并发布ReductionFail（减库存失败），订单服务就会消费该事件并进行Cancel order（取消订单）操作。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/279c8e61c788e2dd9d19377447c21b48.jpg" alt="领域驱动模型DDD使用Saga管理事务"></p> <p>协同式的好处：</p> <p>·松耦合：一眼看去就知道啦，参与方与订阅方除了消息事件的通信，并不会产生耦合；</p> <p>·简单：只需要在创建、更新、删除业务对象时发布事件即可；<br /> 弊端：</p> <p>·过度分散：代码中没有集中定义Saga的地方，因为分布在各个服务中，所以在进行编写和理解时难度较大；</p> <p>·服务之间循环依赖：参考上图，参与方和订阅方身份一直在相互转换相互订阅，虽然不一定引发问题，但这种循环依赖是一种不好的设计风格；</p> <h3 id="编排式saga">编排式Saga</h3> <p>编排式时实现Saga的另一种方式，使用此方式时开发人员定义一个编排器类，这个类职责就是对外告诉Saga的参与方需要做什么。Saga编排器采用同步/异步方式相应方式进行通信。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/7c4d3d2a5af1302b41c8dda6713c9c84.jpg" alt="领域驱动模型DDD使用Saga管理事务"></p> <p>上图很明显与协同式Saga相比，流程更加简洁明了。当然它仅仅只是描述了正常情况下整个运行流程，而涉及到失败情况需要进行实物补偿时我们就得借助状态机模型（有点类似流程图，成功时怎么样，失败了怎么样）对所有可能出现的场景进行判断描述。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f4a821ecc35ab9376e21691fdb7e4e69.jpg" alt="领域驱动模型DDD使用Saga管理事务"></p> <p>上图就是状态机，例如当状态机从Inventory reduction（预锁库存）状态可以转化为Order Pay或者是Reject Inventory reduction状态，当它收到正常回复Inventory Reduction（锁库存成功），那状态转化为Order Pay。而如果收到Inventory Reduction Failed回复（锁库存失败），则状态转为Reject Inventory reduction。（注：状态、消息回复、命令都可以根据自己习惯定义）</p> <p>出上面例举以外，阿里推出的分布式事务管理<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://seata.io/zh-cn/docs/user/saga.html"  target="_blank" rel="nofollow">Seata</a>中的Saga模式也是基于状态机引擎的Saga实现，此处我引用官网的图片简单讲解下（就按流程图来理解）：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1a574730ca0d02a110e12d7ac1c745d6.jpg" alt="领域驱动模型DDD使用Saga管理事务"></p> <p>图中CompensateReduceInventory与CompensateReduceBalance是补偿式事务，当ReduceInventory在理想情况下到达ReduceBalance后触发了CompensationTrigger（补偿触发器）时，CompensateReduceInventory与CompensateReduceBalance两个补偿式事务就会分别对ReduceInventory和ReduceBalance进行补偿，并最终返回Fail的状态。</p> <p>可以看到状态机的存在是为了让我们更直观地看清楚Saga整个运行流程，能够很好地帮助开发人员进行理解，简化了业务逻辑让我们的目光更加注重如何改善隔离性问题。并且编排式的Saga参与者之间的依赖关系更加简单，不存在以来循环的问题。</p> <h2 id="基于eventuate-tram框架的saga模式讲解">基于Eventuate Tram框架的Saga模式讲解</h2> <p>此小章节为了读者能够更好地理解Saga模式在实际落地的应用，本人摘选了《微服务架构设计模式》中的一部分代码，并对代码进行精简优化以便保证读者可以从业务流程带入到代码运行程的连贯性，如果希望了解详细代码各位可以去看原著，百度也有免费的电子书。</p> <p>我们先看一副状态机：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/fd73630c4aa375f5e143f1ff024d7c54.jpg" alt="领域驱动模型DDD使用Saga管理事务"></p> <p>那么我们现在创建一个Saga编排器（CreateOrderSaga），用看图写作的思维，将整个状态机转化为一篇流水账式的代码：</p> <pre><code class="language-java">public class CreateOrderSaga implements SimpleSaga&lt;CreateOrderSagaState&gt; {    private Logger logger = LoggerFactory.getLogger(getClass());    private SagaDefinition&lt;CreateOrderSagaState&gt; sagaDefinition;    public CreateOrderSaga(OrderServiceProxy orderService, ConsumerServiceProxy consumerService, KitchenServiceProxy kitchenService,                          AccountingServiceProxy accountingService) {     this.sagaDefinition =              step()               //补偿式事务，makeRejectOrderCommand创建“拒绝订单命令”，使用rderService.reject中配置的规则发送和回复               .withCompensation(orderService.reject, CreateOrderSagaState::makeRejectOrderCommand)             .step()               //这一步调用参与者，makeValidateOrderByConsumerCommand创建“根据消费者命令进行验证订单”的命令，使用consumerService.validateOrder中配置的规则发送和回复               .invokeParticipant(consumerService.validateOrder, CreateOrderSagaState::makeValidateOrderByConsumerCommand)             .step()               //这一步调用参与者，makeCreateTicketCommand创建“创建收据”的命令，使用kitchenService.create中配置的规则发送和回复               .invokeParticipant(kitchenService.create, CreateOrderSagaState::makeCreateTicketCommand)               //接受到上一步成功回复“CreateTicketReply”的命令后，执行handleCreateTicketReply的命令               .onReply(CreateTicketReply.class, CreateOrderSagaState::handleCreateTicketReply的命令)               //补偿式事务，makeCancelCreateTicketCommand创建“取消创建票据”的命令，使用kitchenService.cancel中的配置发送和回复               .withCompensation(kitchenService.cancel, CreateOrderSagaState::makeCancelCreateTicketCommand)             .step()                //这一步调用参与者，makeAuthorizeCommand创建“授权”命令，使用accountingService.authorize中的配置发送和回复               .invokeParticipant(accountingService.authorize, CreateOrderSagaState::makeAuthorizeCommand)             .step()                //这一步调用参与者，makeConfirmCreateTicketCommand创建“确认创建票”，使用kitchenService.confirmCreate中的配置发送和回复               .invokeParticipant(kitchenService.confirmCreate, CreateOrderSagaState::makeConfirmCreateTicketCommand)             .step()                //这一步调用参与者，makeApproveOrderCommand创建“批准订单”的命令，使用orderService.approve中的配置发送和回复               .invokeParticipant(orderService.approve, CreateOrderSagaState::makeApproveOrderCommand)             .build();   }    @Override   public SagaDefinition&lt;CreateOrderSagaState&gt; getSagaDefinition() {     return sagaDefinition;   } }</code></pre> <p>OrderServiceProxy适配器：</p> <pre><code class="language-java">public class OrderServiceProxy {    public final CommandEndpoint&lt;RejectOrderCommand&gt; reject = CommandEndpointBuilder           //要发送的“拒绝订单”的命令           .forCommand(RejectOrderCommand.class)           //发送命令到命令通讯通道：OrderServiceChannels.orderServiceChannel           .withChannel(OrderServiceChannels.orderServiceChannel)            //回复Saga编排器执行成功的应答           .withReply(Success.class)           .build();    public final CommandEndpoint&lt;ApproveOrderCommand&gt; approve = CommandEndpointBuilder            //执行批准订单的命令           .forCommand(ApproveOrderCommand.class)           .withChannel(OrderServiceChannels.orderServiceChannel)           .withReply(Success.class)           .build(); }</code></pre> <p>KitchenServiceProxy适配器：</p> <pre><code class="language-java">public class KitchenServiceProxy {    public final CommandEndpoint&lt;CreateTicket&gt; create = CommandEndpointBuilder            //要发送的“创建票据”的命令           .forCommand(CreateTicket.class)            //发送命令到命令通信通道：KitchenServiceChannels.kitchenServiceChannel           .withChannel(KitchenServiceChannels.kitchenServiceChannel)            //回复编排器CreateTicketReply的应答           .withReply(CreateTicketReply.class)           .build();    public final CommandEndpoint&lt;ConfirmCreateTicket&gt; confirmCreate = CommandEndpointBuilder           .forCommand(ConfirmCreateTicket.class)           .withChannel(KitchenServiceChannels.kitchenServiceChannel)           .withReply(Success.class)           .build();   public final CommandEndpoint&lt;CancelCreateTicket&gt; cancel = CommandEndpointBuilder           .forCommand(CancelCreateTicket.class)           .withChannel(KitchenServiceChannels.kitchenServiceChannel)           .withReply(Success.class)           .build();  }</code></pre> <p>命令传输的通信通道：</p> <pre><code class="language-java">public class OrderServiceChannels {   public static final String orderServiceChannel = "orderService"; }  public class KitchenServiceChannels {   public static final String kitchenServiceChannel = "kitchenService"; }</code></pre> <p>OrderCommandHandlers定义了接受到命令消息后的具体操作：</p> <pre><code class="language-java">public class OrderCommandHandlers {    @Autowired   private OrderService orderService;    public CommandHandlers commandHandlers() {     return SagaCommandHandlersBuilder           //从此命令通道中获取命令消息           .fromChannel("orderService")           //接受到批准订单命令后执行approveOrder方法           .onMessage(ApproveOrderCommand.class, this::approveOrder)           //接受到拒绝订单命令后执行rejectOrder方法，后面都是如此，自己理解           .onMessage(RejectOrderCommand.class, this::rejectOrder)           .onMessage(BeginCancelCommand.class, this::beginCancel) 		......           .build();    }    public Message approveOrder(CommandMessage&lt;ApproveOrderCommand&gt; cm) {     long orderId = cm.getCommand().getOrderId();     orderService.approveOrder(orderId);     return withSuccess();   }     public Message rejectOrder(CommandMessage&lt;RejectOrderCommand&gt; cm) {     long orderId = cm.getCommand().getOrderId();     orderService.rejectOrder(orderId);     return withSuccess();   } ......... }</code></pre> <p>至此，整个关于Saga基础内容讲解完毕，大家可以根据上面的状态机和代码试着画一下Saga编排器的设计图，看看是否真地对Saga内容有进一步的了解。</p> <h2 id="结语">结语</h2> <p>本文内容结构参照了《微服务架构设计模式》，是在对此书阅读以及结合网络上其他的相关案例总结成连贯，翻译更准确的知识点，其中因为个人水平问题可能存在歧义或疏漏，希望各位读者存在疑问或觉得文章中有需要改正的地方尽情指出。之后将在Saga的基础上讲解事件溯源和CQRS，敬请期待。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-60166.htm">免费领养狗狗网站正规有哪些（免费领养狗狗免费领养宠物的网站）</a></p>
                                        <p>下一个：<a href="/news/article-60757.htm">附近哪里可以领养狗狗狗（附近哪里可以领养狗狗狗的地方）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-2-18-node-share.htm" title="2月18日|21.7M/S，最新高速免费节点，V2ray/Clash/SSR/Shadowrocket订阅链接地址，科学上网">2月18日|21.7M/S，最新高速免费节点，V2ray/Clash/SSR/Shadowrocket订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/news/article-57870.htm" title="python2字符串编码方式_一、基础部分-2.字符串编码">python2字符串编码方式_一、基础部分-2.字符串编码</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-19-free-clash-subscribe.htm" title="1月19日|18.4M/S，最新高速免费节点，SSR/Shadowrocket/V2ray/Clash订阅链接地址，科学上网">1月19日|18.4M/S，最新高速免费节点，SSR/Shadowrocket/V2ray/Clash订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-5-free-clash-subscribe.htm" title="12月5日|21.9M/S，最新高速免费节点，SSR/V2ray/Clash/Shadowrocket订阅链接地址，科学上网">12月5日|21.9M/S，最新高速免费节点，SSR/V2ray/Clash/Shadowrocket订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/news/article-34477.htm" title="孕妇被猫抓伤出了一点血有危险么（孕妇被猫抓了出血对宝宝有什么影响）">孕妇被猫抓伤出了一点血有危险么（孕妇被猫抓了出血对宝宝有什么影响）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-26-free-clash.htm" title="11月26日|20.3M/S，最新高速免费节点，SSR/Shadowrocket/Clash/V2ray订阅链接地址，科学上网">11月26日|20.3M/S，最新高速免费节点，SSR/Shadowrocket/Clash/V2ray订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/news/article-26925.htm" title="动物疫苗的种类有哪些名称图片 动物疫苗的种类有哪些名称图片大全">动物疫苗的种类有哪些名称图片 动物疫苗的种类有哪些名称图片大全</a></li>
                        <li class="py-2"><a href="/news/article-54517.htm" title="宠物领养登记表图片（宠物领养须知）">宠物领养登记表图片（宠物领养须知）</a></li>
                        <li class="py-2"><a href="/news/article-25995.htm" title="多线程详解 创建多线程">多线程详解 创建多线程</a></li>
                        <li class="py-2"><a href="/news/article-56738.htm" title="狗狗领养协议一般是怎么规定的呢（狗狗领养手续）">狗狗领养协议一般是怎么规定的呢（狗狗领养手续）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">69</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>V2rayNode节点分享站 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/v2raynode/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/website/js/frontend/v2raynode/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/website/js/frontend/v2raynode/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/v2raynode/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/website/js/frontend/v2raynode/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>