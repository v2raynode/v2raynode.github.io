<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://v2raynode.github.io/news/article-74680.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Vuex状态管理-mapState的基本用法详细介绍</title>
    <link rel="icon" href="/assets/website/img/v2raynode/favicon.ico" type="image/x-icon"/>
        <meta name="description" content="Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化  // store.js/* vuex的核心" />
    
    <meta name="author" content="V2rayNode节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://v2raynode.github.io/news/article-74680.htm" />
    <meta property="og:site_name" content="V2rayNode节点分享站" />
    <meta property="og:title" content="Vuex状态管理-mapState的基本用法详细介绍" />
    <meta property="og:image" content="https://v2raynode.github.io/uploads/20240303/1a96a5d4718f040752f116dea580c5a1.webp" />
        <meta property="og:release_date" content="2025-03-16T10:26:38" />
    <meta property="og:updated_time" content="2025-03-16T10:26:38" />
        <meta property="og:description" content="Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化  // store.js/* vuex的核心" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Vuex状态管理-mapState的基本用法详细介绍">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/v2raynode/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KDKFWTWW0S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KDKFWTWW0S');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand d-flex align-items-center" href="/">
                                    <span>V2ray Node</span>
                                </a>

                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">Vuex状态管理-mapState的基本用法详细介绍</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/news/">新闻资讯</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night-eighties"> </h1> <ul> <li>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化</li> </ul> <pre><code class="prism language-js"><span class="token comment">// store.js</span><span class="token comment">/* vuex的核心管理对象模块:store  */</span><span class="token keyword">import</span> Vue<span class="token keyword">from</span><span class="token string">'vue'</span><span class="token keyword">import</span> Vuex<span class="token keyword">from</span><span class="token string">'vuex'</span>  Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">// 状态对象</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 初始化状态 这里放置的状态可以被多个组件共享</span>   count<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>   name<span class="token punctuation">:</span><span class="token string">'daming'</span><span class="token punctuation">}</span><span class="token keyword">const</span> mutations<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">const</span> action<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">const</span> getters<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">new</span><span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   state<span class="token punctuation">,</span><span class="token comment">// 状态</span>   mutations<span class="token punctuation">,</span><span class="token comment">// 包含多个更新state函数的对象</span>   actions<span class="token punctuation">,</span><span class="token comment">// 包含多个队形事件回调函数的对象</span>   getters<span class="token comment">// 包含多个getter计算属性函数的对象</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-js"><span class="token comment">// main.js</span><span class="token comment">/* 入口JS  */</span><span class="token keyword">import</span> Vue<span class="token keyword">from</span><span class="token string">'vue'</span><span class="token keyword">import</span> App<span class="token keyword">from</span><span class="token string">'./App.vue'</span><span class="token keyword">import</span> store<span class="token keyword">from</span><span class="token string">'./store'</span><span class="token comment">// 创建vm</span><span class="token comment">/* eslint-disable no-new */</span><span class="token keyword">new</span><span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>   components<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span>App<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 映射组件标签</span>   template<span class="token punctuation">:</span><span class="token string">'&lt;App/&gt;'</span><span class="token punctuation">,</span><span class="token comment">// 指定需要渲染到页面的模板</span>   store<span class="token comment">// 所有的组件对象都多了一个属性:$store</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> </h1> <p>虽然将所有的状态放入Vuex，会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。如果有些状态严格属于单个组件，最好还是作为组件的局部状态，比如temp变量,tempcount,tempcount2作为组件的局部状态。</p> <pre><code class="prism language-html"><span class="token comment">&lt;!-- App.vue --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     {<!-- -->{count}}     {<!-- -->{name}}     {<!-- -->{nameAlias}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> mapState<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vuex'</span><span class="token comment">// 引入mapState</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 使用 Vuex 并不意味着你需要将所有的状态放入 Vuex。虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。</span><span class="token comment">// 如果有些状态严格属于单个组件，最好还是作为组件的局部状态。你应该根据你的应用开发需要进行权衡和确定。</span><span class="token comment">// 下面的temp变量,tempcount,tempcount2作为组件的局部状态</span>       temp<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>       tempcount<span class="token punctuation">:</span><span class="token number">1</span>，       tempcount2<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">// tempCountPlusTempCount2 这个计算属性并没有涉及到vuex管理的状态</span><span class="token function">tempCountPlusTempCount2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token punctuation">}</span><span class="token comment">// 由于 Vuex 的状态存储是响应式的，所以可以使用计算属性来获得某个状态</span><span class="token comment">// 当状态改变时，都会重新求取计算属性，并且触发更新相关联的 DOM</span><span class="token comment">// 通过下面的计算属性，就可以在当前组件中访问到count,name,nameAlias等了 在模板中我们通过大括号符号打印出来</span><span class="token comment">// 下面的计算属性涉及到了vuex管理的状态</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 这实际上是ES6中对象的简化写法 完整写法是 count: function { return this.$store.state.count }</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 这实际上是ES6中对象的简化写法 完整写法是 name: function { return this.$store.state.age }</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">nameAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>       countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token comment">// 但有一个问题</span><span class="token comment">// 当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。比如上面的name(),count(),nameAlias(),显得重复，代码冗长</span><span class="token comment">// 为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键：</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre> <p>但有一个问题，当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。比如上面的name(),count(),nameAlias(),显得重复，代码冗长。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键</p> </h1> <p>mapState函数的可以接受一个对象Object&lt;string | function&gt;。对象中可以包含字符串或函数。mapState()函数的返回结果是一个对象。</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     {<!-- -->{count}}     {<!-- -->{name}}     {<!-- -->{nameAlias}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> mapState<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vuex'</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span>       temp<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>       tempcount<span class="token punctuation">:</span><span class="token number">1</span>，       tempcount2<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   computed<span class="token punctuation">:</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     count<span class="token punctuation">:</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token comment">// string    映射 this.count 为 store.state.count的值</span><span class="token comment">// 箭头函数可使代码更简练</span>     name<span class="token punctuation">:</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token comment">// function   映射 this.name 为 store.state.name的值</span>     nameAlias<span class="token punctuation">:</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token comment">// string   映射 this.nameAlias 为 store.state.name的值</span>     countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 用普通函数this指向vue实例,但是在箭头函数中this就不是指向vue实例了，所以这里必须用普通哈数</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre> <ul> <li>我们继续看上面的mapState函数</li> </ul> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     count<span class="token punctuation">:</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token comment">// string    映射 this.count 为 store.state.count的值</span><span class="token comment">// 箭头函数可使代码更简练</span>     name<span class="token punctuation">:</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token comment">// function   映射 this.name 为 store.state.name的值</span>     nameAlias<span class="token punctuation">:</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token comment">// string   映射 this.nameAlias 为 store.state.name的值</span>     countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 用普通函数this指向vue实例,但是在箭头函数中this就不是指向vue实例了，所以这里必须用普通哈数</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <ul> <li>上面mapState()函数接收了一个对象。</li> </ul> <p>对象的第一个属性是string类型的，<code>count: 'count'</code>, 这条语句映射出了this.count， 值等于store.state.count的值。</p> <p>对象的第二个属性是一个箭头函数，<code>name: (state) =&gt; state.name,</code>，映射 this.name 为 store.state.name的值。</p> <p>对象的第三个属性是一个string类型，<code>nameAlias: 'name'</code>，映射 this.nameAlias 为 store.state.name的值， 和第一个属性的用法本质是一致的，不过这里映射出的计算属性的名称与 state 的子节点名称不同。</p> <p>对象的第四个属性是一个普通函数，普通函数和箭头函数的不同之处在于，普通函数中的this指向了vue实例，因为可以访问到当前组件的局部状态，比如this.tempcount。</p> <p>对象的第五个属性是一个普通函数，第五个和第四个的用法本质是一样的，只不过第五个用了ES6中对象的简化写法。</p> <ul> <li>上面的mapState函数的返回值是一个对象，我们可以看作是这样的</li> </ul> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 这个对象就是mapState的返回值</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token function">nameAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>     countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>把这个对象赋值给computed不就和原始的写法一样了吗，所以mapState起到了简化的作用。但是我们可以发现比起直接给computed赋值，这里少了tempCountPlusTempCount2这个计算属性。tempCountPlusTempCount2不是有vuex状态计算而来的，是根据组件内的局部状态计算来的。</p> </h1> <p>对象的扩展运算符（<code>...</code>）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。为什么要用扩展运算符呢，我们观察到上面直接将mapState函数的返回值赋给computed对象的话，那么computed中就只有对vuex状态的获取，而没有了当前组件的局部状态，比如tempCountPlusTempCount2就没地方放了，所以我们用扩展运算符。</p> <pre><code class="prism language-js"><span class="token keyword">let</span> z<span class="token operator">=</span><span class="token punctuation">{<!-- --></span> a<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> n<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span>z<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 对象的扩展运算符（...）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中</span> n<span class="token comment">// { a: 3, b: 4 }</span></code></pre> <p>所以利用扩展运算符将下面mapState函数的返回值对象</p> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>         count<span class="token punctuation">:</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token comment">// string    映射 this.count 为 store.state.count的值</span><span class="token comment">// 箭头函数可使代码更简练</span>         name<span class="token punctuation">:</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token comment">// function   映射 this.name 为 store.state.name的值</span>         nameAlias<span class="token punctuation">:</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token comment">// string   映射 this.nameAlias 为 store.state.name的值</span>         countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 用普通函数this指向vue实例,但是在箭头函数中this就不是指向vue实例了，所以这里必须用普通哈数</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>上面的结果</p> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token function">nameAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>     countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>于是可以将组将内的计算属性和获取vuex状态的计算属性写在一起了。</p> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token function">tempCountPlusTempCount2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>         count<span class="token punctuation">:</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token comment">// string    映射 this.count 为 store.state.count的值</span><span class="token comment">// 箭头函数可使代码更简练</span>         name<span class="token punctuation">:</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token comment">// function   映射 this.name 为 store.state.name的值</span>         nameAlias<span class="token punctuation">:</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token comment">// string   映射 this.nameAlias 为 store.state.name的值</span>         countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 用普通函数this指向vue实例,但是在箭头函数中this就不是指向vue实例了，所以这里必须用普通哈数</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>这就是mapState的基本用法。</p> </h1> <p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给<code>mapState</code> 传一个字符串数组。</p> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">// 映射 this.count 为 store.state.count</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre> <p>上面的写法可以看作</p> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> </h1> <pre><code class="prism language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{<!-- --></span><span class="token function">tempCountPlusTempCount2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>         nameAlias<span class="token punctuation">:</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token comment">// string   映射 this.nameAlias 为 store.state.name的值</span>         countplustempcount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 用普通函数this指向vue实例,但是在箭头函数中this就不是指向vue实例了，所以这里必须用普通哈数</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">countplustempcount2</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempcount2<span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-74004.htm">猫咪疫苗打几针,多少钱（猫咪疫苗一共打几针多少钱）</a></p>
                                        <p>下一个：<a href="/news/article-74681.htm">动物疫苗的保存温度是多少度（动物疫苗在常温下能放多久）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-74004.htm" title="猫咪疫苗打几针,多少钱（猫咪疫苗一共打几针多少钱）">猫咪疫苗打几针,多少钱（猫咪疫苗一共打几针多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-71349.htm" title="动物疫苗可以自己打吗现在多少钱啊（给动物打疫苗需要多少钱）">动物疫苗可以自己打吗现在多少钱啊（给动物打疫苗需要多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-68746.htm" title="狗粮品牌十大排行榜图片（狗粮品牌有哪些品牌）">狗粮品牌十大排行榜图片（狗粮品牌有哪些品牌）</a></li>
                        <li class="py-2"><a href="/news/article-51828.htm" title="宠物粮食品牌名字4个字大全及图片高清 宠物粮食品牌名字4个字大全及图片高清版">宠物粮食品牌名字4个字大全及图片高清 宠物粮食品牌名字4个字大全及图片高清版</a></li>
                        <li class="py-2"><a href="/news/article-46269.htm" title="兰州最大的宠物市场是哪里（兰州最大宠物市场地址）">兰州最大的宠物市场是哪里（兰州最大宠物市场地址）</a></li>
                        <li class="py-2"><a href="/news/article-51307.htm" title="南京领养猫咪要求（南京在哪领养猫）">南京领养猫咪要求（南京在哪领养猫）</a></li>
                        <li class="py-2"><a href="/news/article-48210.htm" title="新手怎么开宠物店（新手怎么开宠物店开个小型的宠物托管需要多少钱）">新手怎么开宠物店（新手怎么开宠物店开个小型的宠物托管需要多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-47731.htm" title="动物疫苗多少钱一支啊图片大全集高清（动物疫苗多少钱一支啊图片大全集高清图）">动物疫苗多少钱一支啊图片大全集高清（动物疫苗多少钱一支啊图片大全集高清图）</a></li>
                        <li class="py-2"><a href="/news/article-58992.htm" title="免费领养宠物店（免费领养宠物店铺）">免费领养宠物店（免费领养宠物店铺）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-17-clash-v2ray-ss-ssr.htm" title="1月17日|18.9M/S，最新高速免费节点，Shadowrocket/Clash/SSR/V2ray订阅链接地址，科学上网">1月17日|18.9M/S，最新高速免费节点，Shadowrocket/Clash/SSR/V2ray订阅链接地址，科学上网</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>V2rayNode节点分享站 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/v2raynode/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/website/js/frontend/v2raynode/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/website/js/frontend/v2raynode/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/v2raynode/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/website/js/frontend/v2raynode/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>