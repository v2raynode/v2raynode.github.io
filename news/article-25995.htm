<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://v2raynode.github.io/news/article-25995.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>多线程详解 创建多线程</title>
    <link rel="icon" href="/assets/website/img/v2raynode/favicon.ico" type="image/x-icon"/>
        <meta name="description" content="一. 进程与线程： 1. 进程： 进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的" />
        <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/v2raynode/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KDKFWTWW0S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KDKFWTWW0S');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                                <a class="navbar-brand d-flex align-items-center" href="/">
                        V2ray Node</a>
                                
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>

                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">多线程详解 创建多线程</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/news/">新闻资讯</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2><a id="__1" rel="nofollow"></a>一. 进程与线程：</h2> <h3><a id="1__2" rel="nofollow"></a>1. 进程：</h3> <p>进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的时候就会为它分配CPU时间，程序开始真正运行。</p> <h3><a id="2__4" rel="nofollow"></a>2. 线程：</h3> <p>线程是一条执行路径，是程序执行时的最小单位，它是进程的一个执行流，<strong>是CPU调度和分派的基本单位</strong>，一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。线程由CPU独立调度执行，在多CPU环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，每个请求分配一个线程来处理。</p> <h3><a id="3__6" rel="nofollow"></a>3. 执行方式：</h3> <p>① 顺序执行：即程序从上往下一步一步的执行<br /> ② 并发执行：指两个或多个事件在同一个时间段内执行<br /> ③ 并行执行：指两个或多个事件在同一时刻同时执行</p> <h2><a id="__10" rel="nofollow"></a>二. 创建多线程的三种方式：</h2> <h3><a id="1_Thread_11" rel="nofollow"></a>1. 继承Thread类：</h3> <p>继承Thread类后要重写Thread类的run()方法，然后调用start()方法开启线程</p> <pre><code class="prism language-bash">public class TestThread1 extends Thread<span class="token punctuation">{<!-- --></span>     public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         EatThread eatThread<span class="token operator">=</span> new EatThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         DrinkThread drinkThread<span class="token operator">=</span> new DrinkThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         eatThread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         drinkThread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  class EatThread extends Thread<span class="token punctuation">{<!-- --></span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         System.out.println<span class="token punctuation">(</span><span class="token string">"开始吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             Thread.sleep<span class="token punctuation">(</span>5000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"结束吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  class DrinkThread extends Thread<span class="token punctuation">{<!-- --></span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         System.out.println<span class="token punctuation">(</span><span class="token string">"开始喝酒?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             Thread.sleep<span class="token punctuation">(</span>5000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"结束喝酒?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>此时的运行结果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/d2d7a5ecf5e40bd9cee8da4a9dc98d96.jpg" alt="多线程详解 创建多线程"><br /> 当把主函数（即主线程）改为run()方法开启线程：</p> <pre><code class="prism language-bash">public class TestThread1 extends Thread<span class="token punctuation">{<!-- --></span>     public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         EatThread eatThread<span class="token operator">=</span> new EatThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         DrinkThread drinkThread<span class="token operator">=</span> new DrinkThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         eatThread.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         drinkThread.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>此时的运行结果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/e0fcfe814893926a06c75f900470d057.jpg" alt="多线程详解 创建多线程"><br /> 造成区别的原因时：当使用start()方法开启线程时，各线程是并发执行的，当使用run()方法开启线程时，各线程是顺序执行的。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/c1299022aafd1d795354f12c4d78146f.jpg" alt="多线程详解 创建多线程"></p> <h3><a id="2_Runnable_68" rel="nofollow"></a>2. 实现Runnable接口：</h3> <p>与继承Thread类方法类似，实现Runnable接口后要重写run()方法，然后使用Thread类来包装调用start()方法开启线程</p> <pre><code class="prism language-bash">public class TestThread2 implements Runnable<span class="token punctuation">{<!-- --></span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         System.out.println<span class="token punctuation">(</span><span class="token string">"开始吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             Thread.sleep<span class="token punctuation">(</span>5000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"结束吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         TestThread2 t1<span class="token operator">=</span> new TestThread2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         new Thread<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread thread<span class="token operator">=</span> new Thread<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  //对同一对象进行多线程从操作         thread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>运行结果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/efb9a4ce31cb69c1b2ef9e078b768167.jpg" alt="多线程详解 创建多线程"></p> <pre><code class="prism language-handlebars"><span class="token variable">注意：</span><span class="token variable">new</span><span class="token variable">Thread</span><span class="token punctuation">(</span><span class="token variable">t1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">和</span><span class="token variable">Thread</span><span class="token variable">thread</span><span class="token punctuation">=</span><span class="token variable">new</span><span class="token variable">Thread</span><span class="token punctuation">(</span><span class="token variable">t1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">thread</span><span class="token punctuation">.</span><span class="token variable">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">这两种写法效果是一样的</span><span class="token variable">第一种方法继承Thread类，Thread类也实现了Runnable接口</span><span class="token variable">第二种方法实现Runnable接口，类似创建一个代理工具类</span><span class="token variable">推荐使用实现Runnable接口的方法实现多线程，可以避免Java单线程的限制</span><span class="token variable">线程开启不一定立即执行，由CPU调度执行</span></code></pre> <h3><a id="3_Callable_110" rel="nofollow"></a>3. 实现Callable接口：</h3> <p>① 实现Callable接口，需要返回值类型<br /> ② 重写call()方法，需要抛出异常<br /> ③ 创建目标对象 : TestThread3 testThread3 = new TestThread3()<br /> ④ 创建执行服务 : ExecutorService ser = Executors.newFixedThreadPool(2)<br /> ⑤ 提交执行 : Future r1 = ser.submit(testThread3)<br /> ⑥ 获取结果 : boolean rst1 = r1.get();<br /> ⑦ 关闭服务 : ser.shutdownNow();</p> <pre><code class="prism language-bash">public class TestThread3 implements Callable<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span>  //①实现Callable接口，需要返回值类型     private String name<span class="token punctuation">;</span>      public TestThread3<span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         this.name<span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>     @Override     public Boolean call<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{<!-- --></span>  //②重写call<span class="token punctuation">(</span><span class="token punctuation">)</span>方法，需要抛出异常         if<span class="token punctuation">(</span>name.equals<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">))</span><span class="token punctuation">{<!-- --></span>             System.out.println<span class="token punctuation">(</span><span class="token string">"欢迎"</span>+name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws ExecutionException, InterruptedException<span class="token punctuation">{<!-- --></span>         //③创建目标对象         TestThread3 t1<span class="token operator">=</span> new TestThread3<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         TestThread3 t2<span class="token operator">=</span> new TestThread3<span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          //④创建执行服务         ExecutorService ser<span class="token operator">=</span> Executors.newFixedThreadPool<span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span>          //⑤提交执行         Future<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span> r1<span class="token operator">=</span> ser.submit<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>         Future<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span> r2<span class="token operator">=</span> ser.submit<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>          //⑥获取结果         boolean rst1<span class="token operator">=</span> r1.get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         boolean rst2<span class="token operator">=</span> r2.get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System.out.println<span class="token punctuation">(</span>rst1<span class="token punctuation">)</span><span class="token punctuation">;</span>         System.out.println<span class="token punctuation">(</span>rst2<span class="token punctuation">)</span><span class="token punctuation">;</span>          //⑦关闭服务         ser.shutdownNow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>运行结果：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/747425e673d4f262be469697d474a08a.jpg" alt="多线程详解 创建多线程"></p> <h2><a id="__160" rel="nofollow"></a>三. 多线程实例——龟兔赛跑</h2> <pre><code class="prism language-bash">public class Race implements Runnable<span class="token punctuation">{<!-- --></span>     private static String winner<span class="token punctuation">;</span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span> 1<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> 100<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             // 模拟兔子休息             if<span class="token punctuation">(</span>Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span><span class="token string">"兔子"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> i%10<span class="token operator">==</span>0<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 try<span class="token punctuation">{<!-- --></span>                     Thread.sleep<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>              boolean flag<span class="token operator">=</span> isGameOver<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>             // 如果比赛结束，终止程序<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>             // Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>获取当前线程             // Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>获取当前线程名字             System.out.print<span class="token punctuation">(</span>Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"--&gt;跑了"</span>+i+<span class="token string">"步"</span>+<span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             if<span class="token punctuation">(</span>i%5<span class="token operator">==</span>0<span class="token punctuation">)</span>                 System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>     // 判断是否有胜利者     public boolean isGameOver<span class="token punctuation">(</span>int step<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>winner<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>step<span class="token operator">&gt;=</span>100<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 winner<span class="token operator">=</span> Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 System.out.println<span class="token punctuation">(</span><span class="token string">"winner is "</span>+winner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         Race race<span class="token operator">=</span> new Race<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         new Thread<span class="token punctuation">(</span>race,<span class="token string">"兔子"</span><span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         new Thread<span class="token punctuation">(</span>race,<span class="token string">"乌龟"</span><span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>结果：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/b3c242e1a23467509c5b436382f0b95e.jpg" alt="多线程详解 创建多线程"><br /> 参考:<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/vbirdbest/article/details/81282163"  rel="nofollow">https://blog.csdn.net/vbirdbest/article/details/81282163</a>.</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-25528.htm">什么平台可以卖账号（什么平台卖账号最安全）</a></p>
                                        <p>下一个：<a href="/news/article-25996.htm">合肥宠物领养网站 合肥宠物领养网站有哪些</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-5-14-free-high-speed-nodes.htm" title="5月14日|21.1M/S，最新高速免费节点，Shadowrocket/V2ray/SSR/Clash订阅链接地址">5月14日|21.1M/S，最新高速免费节点，Shadowrocket/V2ray/SSR/Clash订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-18-free-v2ray-subscribe.htm" title="9月18日|18M/S，最新高速免费节点，Clash/SSR/V2ray/Shadowrocket订阅链接地址，科学上网">9月18日|18M/S，最新高速免费节点，Clash/SSR/V2ray/Shadowrocket订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/news/article-22290.htm" title="在Python中使用ibis,impyla,pyhive,pyspark连接Kerberos安全认证的Hive、Impala">在Python中使用ibis,impyla,pyhive,pyspark连接Kerberos安全认证的Hive、Impala</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-3-15-free-node-subscribe-links.htm" title="3月15日21.9M/S|Shadowrocket/V2ray/Clash/SSR免费节点每天更新订阅链接">3月15日21.9M/S|Shadowrocket/V2ray/Clash/SSR免费节点每天更新订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-5-free-ssr-subscribe.htm" title="10月5日|20.5M/S，最新高速免费节点，V2ray/Shadowrocket/SSR/Clash订阅链接地址，科学上网">10月5日|20.5M/S，最新高速免费节点，V2ray/Shadowrocket/SSR/Clash订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-22-free-ssr-subscribe.htm" title="7月22日|19.5M/S，最新高速免费节点，SSR/Clash/Shadowrocket/V2ray订阅链接地址">7月22日|19.5M/S，最新高速免费节点，SSR/Clash/Shadowrocket/V2ray订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-26-free-clash.htm" title="11月26日|20.3M/S，最新高速免费节点，SSR/Shadowrocket/Clash/V2ray订阅链接地址，科学上网">11月26日|20.3M/S，最新高速免费节点，SSR/Shadowrocket/Clash/V2ray订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-5-1-clash-node.htm" title="5月1日|19.2M/S，最新高速免费节点，Shadowrocket/Clash/V2ray/SSR订阅链接地址">5月1日|19.2M/S，最新高速免费节点，Shadowrocket/Clash/V2ray/SSR订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-8-free-clash-subscribe.htm" title="12月8日|22.2M/S，最新高速免费节点，Shadowrocket/SSR/V2ray/Clash订阅链接地址，科学上网">12月8日|22.2M/S，最新高速免费节点，Shadowrocket/SSR/V2ray/Clash订阅链接地址，科学上网</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-28-shadowrocket-node.htm" title="8月28日|18.9M/S，最新高速免费节点，Clash/V2ray/Shadowrocket/SSR订阅链接地址，科学上网">8月28日|18.9M/S，最新高速免费节点，Clash/V2ray/Shadowrocket/SSR订阅链接地址，科学上网</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">48</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">29</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">29</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                    <p>V2rayNode节点分享站 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/v2raynode/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/website/js/frontend/v2raynode/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/website/js/frontend/v2raynode/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/v2raynode/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/website/js/frontend/v2raynode/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>